{"ast":null,"code":"import { map } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PatientServiceService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.patientURL = \"http://localhost:8080/api/patient\";\n    this.docURL = \"http://localhost:8080/api/doctor\";\n  }\n  getAllDoctors() {\n    return this.httpClient.get(this.docURL).pipe(map(response => response._embedded.doctor));\n  }\n  getAllPatient() {\n    return this.httpClient.get(this.patientURL).pipe(map(response => response._embedded.patients));\n  }\n  savePatient(patients) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'auto_token',\n        'Access-control-Allow-Origin': '*'\n      })\n    };\n    return this.httpClient.post(this.patientURL, patients, httpOptions);\n  }\n  getPatientById(id) {\n    const patientIDURl = this.patientURL + \"/\" + id;\n    return this.httpClient.get(patientIDURl);\n  }\n  updatePatient(patients) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'auth-token',\n        'Access-Control-Allow-Origin': '*'\n      })\n    };\n    return this.httpClient.put(this.patientURL + `/${patients.id}`, patients, httpOptions);\n  }\n  deletePatient(id) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'auth-token',\n        'Access-Control-Allow-Origin': '*'\n      })\n    };\n    return this.httpClient.delete(this.patientURL + `/${id}`, httpOptions);\n  }\n  getAllPatientsSearchByPname(pname) {\n    const searchURL = \"http://localhost:8080/api/patient/search/findByPnameIgnoreCase?pname=\" + pname;\n    return this.httpClient.get(searchURL).pipe(map(response => response._embedded.patients));\n  }\n  getAllPatientByDoctor(doctorId) {\n    const doctorIdURL = \"http://localhost:8080/api/patient/search/findByDoctortId?id=\" + doctorId;\n    return this.httpClient.get(doctorIdURL).pipe(map(response => response._embedded.patients));\n  }\n}\nPatientServiceService.ɵfac = function PatientServiceService_Factory(t) {\n  return new (t || PatientServiceService)(i0.ɵɵinject(i1.HttpClient));\n};\nPatientServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PatientServiceService,\n  factory: PatientServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAsBA,GAAG,QAAO,MAAM;AAEtC,SAAkCC,WAAW,QAAQ,sBAAsB;;;AAK3E,OAAM,MAAOC,qBAAqB;EAGhCC,YAAoBC,UAAqB;IAArB,eAAU,GAAVA,UAAU;IAFtB,eAAU,GAAC,mCAAmC;IAC9C,WAAM,GAAC,kCAAkC;EAIjD;EAEAC,aAAa;IAEX,OAAO,IAAI,CAACD,UAAU,CAACE,GAAG,CAAoB,IAAI,CAACC,MAAM,CAAC,CAACC,IAAI,CAACR,GAAG,CAACS,QAAQ,IAAEA,QAAQ,CAACC,SAAS,CAACC,MAAM,CAAC,CAAC;EAC1G;EAEDC,aAAa;IAEX,OAAO,IAAI,CAACR,UAAU,CAACE,GAAG,CAAqB,IAAI,CAACO,UAAU,CAAC,CAACL,IAAI,CAACR,GAAG,CAACS,QAAQ,IAAGA,QAAQ,CAACC,SAAS,CAACI,QAAQ,CAAC,CAAC;EAClH;EACAC,WAAW,CAACD,QAAgB;IAE3B,MAAME,WAAW,GACjB;MACEC,OAAO,EAAC,IAAIhB,WAAW,CAAC;QACtB,cAAc,EAAC,kBAAkB;QACjC,eAAe,EAAC,YAAY;QAC5B,6BAA6B,EAAC;OAE/B;KACF;IACD,OAAO,IAAI,CAACG,UAAU,CAACc,IAAI,CAAU,IAAI,CAACL,UAAU,EAACC,QAAQ,EAACE,WAAW,CAAC;EAC3E;EAIAG,cAAc,CAACC,EAAS;IAEvB,MAAMC,YAAY,GAAC,IAAI,CAACR,UAAU,GAAC,GAAG,GAACO,EAAE;IAC1C,OAAO,IAAI,CAAChB,UAAU,CAACE,GAAG,CAAUe,YAAY,CAAC;EACjD;EAGAC,aAAa,CAACR,QAAgB;IAC7B,MAAME,WAAW,GAAG;MAClBC,OAAO,EAAG,IAAIhB,WAAW,CAAC;QACtB,cAAc,EAAG,kBAAkB;QACnC,eAAe,EAAG,YAAY;QAC9B,6BAA6B,EAAG;OACnC;KACF;IACD,OAAQ,IAAI,CAACG,UAAU,CAACmB,GAAG,CAAU,IAAI,CAACV,UAAU,GAAC,IAAIC,QAAQ,CAACM,EAAE,EAAE,EAACN,QAAQ,EAACE,WAAW,CAAC;EAC9F;EAEAQ,aAAa,CAAEJ,EAAU;IAEvB,MAAMJ,WAAW,GAAG;MAClBC,OAAO,EAAG,IAAIhB,WAAW,CAAC;QACtB,cAAc,EAAG,kBAAkB;QACnC,eAAe,EAAG,YAAY;QAC9B,6BAA6B,EAAG;OACnC;KACF;IACD,OAAQ,IAAI,CAACG,UAAU,CAACqB,MAAM,CAAW,IAAI,CAACZ,UAAU,GAAC,IAAIO,EAAE,EAAE,EAACJ,WAAW,CAAC;EAChF;EAGAU,2BAA2B,CAACC,KAAc;IACxC,MAAMC,SAAS,GAAG,uEAAuE,GAAGD,KAAK;IAEjG,OAAO,IAAI,CAACvB,UAAU,CAACE,GAAG,CAAmBsB,SAAS,CAAC,CAACpB,IAAI,CAACR,GAAG,CAACS,QAAQ,IAAIA,QAAQ,CAACC,SAAS,CAACI,QAAQ,CAAC,CAAC;EAC5G;EAEAe,qBAAqB,CAACC,QAAgB;IACpC,MAAOC,WAAW,GAAG,8DAA8D,GAAED,QAAQ;IAE7F,OAAO,IAAI,CAAC1B,UAAU,CAACE,GAAG,CAAqByB,WAAW,CAAC,CACzDvB,IAAI,CAACR,GAAG,CAACS,QAAQ,IAAEA,QAAQ,CAACC,SAAS,CAACI,QAAQ,CAAC,CAAC;EAEnD;;;mBA5EUZ,qBAAqB;AAAA;;SAArBA,qBAAqB;EAAA8B,SAArB9B,qBAAqB;EAAA+B,YAFpB;AAAM","names":["map","HttpHeaders","PatientServiceService","constructor","httpClient","getAllDoctors","get","docURL","pipe","response","_embedded","doctor","getAllPatient","patientURL","patients","savePatient","httpOptions","headers","post","getPatientById","id","patientIDURl","updatePatient","put","deletePatient","delete","getAllPatientsSearchByPname","pname","searchURL","getAllPatientByDoctor","doctorId","doctorIdURL","factory","providedIn"],"sourceRoot":"","sources":["D:\\angular\\HospitalmanagementSystem\\src\\app\\patient-service.service.ts"],"sourcesContent":["\nimport { Injectable } from '@angular/core';\nimport { Observable , map} from 'rxjs';\nimport { Patient } from './common/patient';\nimport { HttpClient, HttpHandler, HttpHeaders } from '@angular/common/http';\nimport { Doctor } from './common/doctor';\n@Injectable({\n  providedIn: 'root'\n})\nexport class PatientServiceService {\n  private patientURL=\"http://localhost:8080/api/patient\";\n  private docURL=\"http://localhost:8080/api/doctor\";\n  constructor(private httpClient:HttpClient)\n  { \n\n  }\n\n  getAllDoctors():Observable<Doctor[]>\n   {\n    return this.httpClient.get<getDoctorResponse>(this.docURL).pipe(map(response=>response._embedded.doctor))\n   }\n\n  getAllPatient():Observable<Patient[]>\n   {\n    return this.httpClient.get<getPatientResponse>(this.patientURL).pipe(map(response=> response._embedded.patients))\n   }\n   savePatient(patients:Patient):Observable<Patient>\n   {\n    const httpOptions=\n    {\n      headers:new HttpHeaders({\n        'Content-Type':'application/json',\n        'Authorization':'auto_token',\n        'Access-control-Allow-Origin':'*'\n\n      })\n    };\n    return this.httpClient.post<Patient>(this.patientURL,patients,httpOptions);\n   }\n\n\n\n   getPatientById(id:number):Observable<Patient>\n   {\n    const patientIDURl=this.patientURL+\"/\"+id;\n   return this.httpClient.get<Patient>(patientIDURl);\n   }\n\n\n   updatePatient(patients:Patient):Observable<Patient>{\n    const httpOptions = {\n      headers : new HttpHeaders({\n          'Content-Type' : 'application/json',\n          'Authorization' : 'auth-token',\n          'Access-Control-Allow-Origin' : '*'\n      })\n    };\n    return  this.httpClient.put<Patient>(this.patientURL+`/${patients.id}`,patients,httpOptions);\n  }\n\n  deletePatient (id: Number) {\n   \n    const httpOptions = {\n      headers : new HttpHeaders({\n          'Content-Type' : 'application/json',\n          'Authorization' : 'auth-token',\n          'Access-Control-Allow-Origin' : '*'\n      })\n    };\n    return  this.httpClient.delete<Patient >(this.patientURL+`/${id}`,httpOptions);\n  }\n\n\n  getAllPatientsSearchByPname(pname : string) : Observable<Patient[]> {\n    const searchURL = \"http://localhost:8080/api/patient/search/findByPnameIgnoreCase?pname=\" + pname;\n\n    return this.httpClient.get<GetSearchByPname>(searchURL).pipe(map(response => response._embedded.patients));\n  } \n\n  getAllPatientByDoctor(doctorId :number ): Observable<Patient[]>{\n    const  doctorIdURL = \"http://localhost:8080/api/patient/search/findByDoctortId?id=\"+ doctorId;\n     \n    return this.httpClient.get<getPatientResponse>(doctorIdURL)\n     .pipe(map(response=>response._embedded.patients))\n \n   }\n\n  }\ninterface getPatientResponse\n{\n  _embedded:\n  {\n    patients:Patient[]\n  }\n}\ninterface GetSearchByPname{\n  _embedded : {\n    patients : Patient[]\n  }\n}\n\ninterface getDoctorResponse\n{\n  _embedded :{\n\ndoctor :Doctor[]\n  }\n}\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}